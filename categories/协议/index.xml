<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>协议 - Category - 比特垃圾桶</title><link>https://aladdinding.cn/categories/%E5%8D%8F%E8%AE%AE/</link><description>协议 - Category - 比特垃圾桶</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>aladdinding@qq.com (大猫)</managingEditor><webMaster>aladdinding@qq.com (大猫)</webMaster><lastBuildDate>Fri, 18 Nov 2022 10:53:13 +0800</lastBuildDate><atom:link href="https://aladdinding.cn/categories/%E5%8D%8F%E8%AE%AE/" rel="self" type="application/rss+xml"/><item><title>为什么 Proxy 认证要发两次请求</title><link>https://aladdinding.cn/%E4%B8%BA%E4%BB%80%E4%B9%88proxy%E8%AE%A4%E8%AF%81%E8%A6%81%E5%8F%91%E4%B8%A4%E6%AC%A1%E8%AF%B7%E6%B1%82/</link><pubDate>Fri, 18 Nov 2022 10:53:13 +0800</pubDate><author>大猫</author><guid>https://aladdinding.cn/%E4%B8%BA%E4%BB%80%E4%B9%88proxy%E8%AE%A4%E8%AF%81%E8%A6%81%E5%8F%91%E4%B8%A4%E6%AC%A1%E8%AF%B7%E6%B1%82/</guid><description>现象 这段时间通过上服务器观察日志，发现部分语言的 HTTP 客户端在进行代理认证的时候会发送两次 HTTP 请求 第一次请求不会携带任何认证信息 第二次请求才会携带</description></item><item><title>gRPC 发送已经序列化好的数据</title><link>https://aladdinding.cn/grpc%E5%8F%91%E9%80%81%E5%B7%B2%E7%BB%8F%E5%BA%8F%E5%88%97%E5%8C%96%E5%A5%BD%E7%9A%84%E6%95%B0%E6%8D%AE/</link><pubDate>Thu, 01 Sep 2022 10:59:39 +0800</pubDate><author>大猫</author><guid>https://aladdinding.cn/grpc%E5%8F%91%E9%80%81%E5%B7%B2%E7%BB%8F%E5%BA%8F%E5%88%97%E5%8C%96%E5%A5%BD%E7%9A%84%E6%95%B0%E6%8D%AE/</guid><description>场景 在之前的 gRPC 系统中加了个 redis 缓存临时缓冲要上报的数据，对于数据反复序列化肯定是有性能损耗的 而且 gRPC 提供的接口似乎没有可以直接发送已经序列化好的</description></item><item><title>gRPC 框架入门</title><link>https://aladdinding.cn/grpc%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</link><pubDate>Thu, 28 Jul 2022 18:41:06 +0800</pubDate><author>大猫</author><guid>https://aladdinding.cn/grpc%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</guid><description>近期上线项目优化，需要将节点与 master 交互方式从之前的短轮训改进到长连接，同时也需要改进序列化传输方式（之前使用的是序列化 pythoon 对象的 ujosn），很</description></item><item><title>Protocol Buffers 协议使用小结</title><link>https://aladdinding.cn/protocol-buffers%E5%8D%8F%E8%AE%AE%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</link><pubDate>Thu, 14 Apr 2022 10:46:52 +0800</pubDate><author>大猫</author><guid>https://aladdinding.cn/protocol-buffers%E5%8D%8F%E8%AE%AE%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</guid><description>官方文档 Language Guide (proto3) protocol-buffers 代码生成指南 网络上关于 Protocol Buffers 的翻译已经很多了，这里就不再重新写一遍了，主要记录一下常用语法。其实就是定义一个 .proto 文件，然后根据不</description></item><item><title>HTTPS 协议是如何握手的</title><link>https://aladdinding.cn/https%E5%8D%8F%E8%AE%AE%E6%98%AF%E5%A6%82%E4%BD%95%E6%8F%A1%E6%89%8B%E7%9A%84/</link><pubDate>Tue, 23 Nov 2021 18:38:50 +0800</pubDate><author>大猫</author><guid>https://aladdinding.cn/https%E5%8D%8F%E8%AE%AE%E6%98%AF%E5%A6%82%E4%BD%95%E6%8F%A1%E6%89%8B%E7%9A%84/</guid><description>Hypertext Transfer Protocol Secure (HTTPS) is an extension of the Hypertext Transfer Protocol (HTTP). It is used for secure communication over a computer network, and is widely used on the Internet. In HTTPS, the communication protocol is encrypted using Transport Layer Security (TLS) or, formerly, its predecessor, Secure Sockets Layer (SSL). The protocol is therefore also often referred to as HTTP over TLS, or HTTP over SSL. HTTPS (Hypertext Transfer</description></item><item><title>代理服务器如何支持 HTTPS</title><link>https://aladdinding.cn/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A6%82%E4%BD%95%E6%94%AF%E6%8C%81https/</link><pubDate>Mon, 10 May 2021 14:22:40 +0800</pubDate><author>大猫</author><guid>https://aladdinding.cn/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A6%82%E4%BD%95%E6%94%AF%E6%8C%81https/</guid><description>说到支持 HTTPS 协议，第一时间想到的是配置各种复杂的证书。实际上大多数代理服务器能够支持 HTTPS 都是通过 HTTP 协议中的 Web 隧道（也有叫做 HTTP 隧道）功能来实现的。</description></item><item><title>SOCKS 协议交互流程记录</title><link>https://aladdinding.cn/socks%E5%8D%8F%E8%AE%AE%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/</link><pubDate>Sun, 19 Jul 2020 10:40:08 +0800</pubDate><author>大猫</author><guid>https://aladdinding.cn/socks%E5%8D%8F%E8%AE%AE%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/</guid><description>SOCKS 是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。SOCKS 是 &amp;ldquo;Socket Secure&amp;rdquo; 的缩写。当防火墙后的客户端要访问外部的服务器时，就跟 SOCKS 代</description></item></channel></rss>