<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on 大猫的博客</title><link>https://aladdinding.cn/tags/go/</link><description>Recent content in Go on 大猫的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 21 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://aladdinding.cn/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 air 实现 go 程序热加载</title><link>https://aladdinding.cn/post/%E4%BD%BF%E7%94%A8-air-%E5%AE%9E%E7%8E%B0-go-%E7%A8%8B%E5%BA%8F%E7%83%AD%E5%8A%A0%E8%BD%BD/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><guid>https://aladdinding.cn/post/%E4%BD%BF%E7%94%A8-air-%E5%AE%9E%E7%8E%B0-go-%E7%A8%8B%E5%BA%8F%E7%83%AD%E5%8A%A0%E8%BD%BD/</guid><description>在使用 Python Web 框架 Django 本地 runserver 启动后修改了代码，程序够自动重新加载并执行（live-reload），在开发调试阶段非常实用，可以提高开发效率。
在使用 Go 开发自己的项目或者使用 gin 框架进行本地调试的时候，也需要在文件修改后自动编译运行查看效果，那么则可以使用 air 这个工具。
AIR air 使用 go 语言开发，可以实现 go 语言应用程序的热加载，它支持以下特性：
彩色日志输出 自定义构建或二进制命令 支持忽略子目录 启动后支持监听新目录 更好的构建流程 安装 由于是 go 语言开发，对于我来说就直接下载二进制文件放到系统 PATH 目录下了，当然也可以使用 go get 、Docker 等方式安装，具体可以查看 Readme 中其他的安装方法，这里就不再赘述了
使用 写好 .air.conf 文件放在项目目录下然后直接执行 air 命令就行，非常简单
完整的示例以及注释如下，需要新增环境变量或者是命令行参数的可以在 full_bin 前后添加
1# [Air](https://github.com/cosmtrek/air) TOML 格式的配置文件 2 3# 工作目录 4# 使用 . 或绝对路径，请注意 `tmp_dir` 目录必须在 `root` 目录下 5root = &amp;#34;.&amp;#34; 6tmp_dir = &amp;#34;tmp&amp;#34; 7 8[build] 9# 只需要写你平常编译使用的 shell 命令。你也可以使用 `make` 10cmd = &amp;#34;go build -o .</description></item><item><title>Go 语言跨平台编译</title><link>https://aladdinding.cn/post/go-%E8%AF%AD%E8%A8%80%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://aladdinding.cn/post/go-%E8%AF%AD%E8%A8%80%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91/</guid><description>go build 使用：
1go build [-o 输出名] [-i] [编译标记] [包名] 默认我们 go build 的可执行文件都是当前操作系统可执行的文件，如果我想在 macOS 下编译一个 linux 下可执行文件，那需要怎么做呢？
只需要指定目标操作系统的平台和处理器架构即可，例如 Window 平台终端下按如下方式指定环境变量。
1SET CGO_ENABLED=0 // 禁用 CGO 2SET GOOS=linux // 目标平台是 linux 3SET GOARCH=amd64 // 目标处理器架构是 amd64 macOS 编译 Linux 和 Windows 平台 64 位 可执行程序:
1CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build 2CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build Linux 编译 Mac 和 Windows 平台 64 位可执行程序：
1CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build 2CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build Windows 编译 Mac 平台 64 位可执行程序</description></item></channel></rss>