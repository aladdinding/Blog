<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法 on 阿拉丁的博客</title><link>https://aladdinding.cn/tags/%E7%AE%97%E6%B3%95/</link><description>Recent content in 算法 on 阿拉丁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 24 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://aladdinding.cn/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>数据结构与算法之时间、空间复杂度</title><link>https://aladdinding.cn/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link><pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate><guid>https://aladdinding.cn/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid><description>时间复杂度 算法的执行时间与算法输入值之间的的关系，即算法的执行效率
大 O 表示法 用常数 1 取代运行时间中的所有加法常数。 在修改后的运行次数函数中，只保留最高阶项。 如果最高阶项存在且不是 1，则去除与这个项相乘的常数。得到的结果就是大 O 阶 常见时间复杂度 O(1) 常数阶 1 2 3 4 def O1(num): i = num j = num*2 return i + j O(logn) 对数阶 1 2 3 4 5 def OlogN(num): i = 1 while (i &amp;lt; num): i = i * 2 return i O(n) 线性阶 1 2 3 4 5 def ON(num): total = 0 for i in range(num): total += i return total O(nlogn) nlogn 阶 1 2 3 4 5 6 7 8 def ONlogN(num): total = 0 for i in range(num): j = 1 while (j &amp;lt; num): total += i+j j = j * 2 return total O(n^2) 平方阶 1 2 3 4 5 6 def ON2(num): total = 0 for i in range(num): for j in range(num): total += i+j return total 对比 常用时间复杂度所耗费的时间从小到大依次是：</description></item></channel></rss>