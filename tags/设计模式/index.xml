<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on 大猫的博客</title><link>https://aladdinding.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on 大猫的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 06 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://aladdinding.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>设计模式之结构型模式</title><link>https://aladdinding.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate><guid>https://aladdinding.cn/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid><description>结构型模式介绍如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效
适配器 桥接 组合 组合模式是一种结构型设计模式，你可以使用它将对象组合成树状结构，并且能像使用独立对象一样使用它们。
在组合模式中，无论是复杂的还是简单的对象共用一个接口。在这个统一接口的帮助下，客户端不必在意其对象的具体类
装饰 装饰模式是一种结构型设计模式，允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package main import &amp;#34;fmt&amp;#34; type drink interface { getPrice() int } type coffee struct { } func (c *coffee) getPrice() int { return 20 } type addMilk struct { drink drink } func (add *addMilk) getPrice() int { drinkPrice := add.</description></item></channel></rss>