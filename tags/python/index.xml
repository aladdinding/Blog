<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Python - Tag - munding's bitbucket</title><link>https://aladdinding.cn/tags/python/</link><description>Python - Tag - munding's bitbucket</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>aladdinding@qq.com (munding)</managingEditor><webMaster>aladdinding@qq.com (munding)</webMaster><lastBuildDate>Thu, 01 Sep 2022 10:59:39 +0800</lastBuildDate><atom:link href="https://aladdinding.cn/tags/python/" rel="self" type="application/rss+xml"/><item><title>GRPC发送已经序列化好的数据</title><link>https://aladdinding.cn/grpc%E5%8F%91%E9%80%81%E5%B7%B2%E7%BB%8F%E5%BA%8F%E5%88%97%E5%8C%96%E5%A5%BD%E7%9A%84%E6%95%B0%E6%8D%AE/</link><pubDate>Thu, 01 Sep 2022 10:59:39 +0800</pubDate><author>munding</author><guid>https://aladdinding.cn/grpc%E5%8F%91%E9%80%81%E5%B7%B2%E7%BB%8F%E5%BA%8F%E5%88%97%E5%8C%96%E5%A5%BD%E7%9A%84%E6%95%B0%E6%8D%AE/</guid><description>场景 在之前的 gRPC 系统中加了个 redis 缓存临时缓冲要上报的数据，对于数据反复序列化肯定是有性能损耗的 而且 gRPC 提供的接口似乎没有可以直接发送已经序列化好的</description></item><item><title>Python中的线程安全和原子操作</title><link>https://aladdinding.cn/python%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%92%8C%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</link><pubDate>Sun, 19 Apr 2020 10:45:32 +0800</pubDate><author>munding</author><guid>https://aladdinding.cn/python%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%92%8C%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</guid><description>经常看到一些 Python 第三方库的 features 中都写到了 Thread safety（线程安全），那么究竟什么是线程安全呢？ 线程不安全 首先看看线程不安全的情况，下面一段代码开</description></item><item><title>Python之禅</title><link>https://aladdinding.cn/python%E4%B9%8B%E7%A6%85/</link><pubDate>Thu, 16 Jan 2020 17:00:13 +0800</pubDate><author>munding</author><guid>https://aladdinding.cn/python%E4%B9%8B%E7%A6%85/</guid><description>原文 Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren&amp;rsquo;t special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one&amp;ndash; and</description></item></channel></rss>