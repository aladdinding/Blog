<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>redis on 个人文章分享</title><link>https://aladdinding.cn/tags/redis/</link><description>Recent content in redis on 个人文章分享</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 05 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://aladdinding.cn/tags/redis/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis 源码之简单动态字符串</title><link>https://aladdinding.cn/post/redis-%E6%BA%90%E7%A0%81%E4%B9%8B%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://aladdinding.cn/post/redis-%E6%BA%90%E7%A0%81%E4%B9%8B%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>Redis 中字符串的实现并没有完全使用 C 字符串，而是重新定义了简单动态字符串 SDS（Simple Dynamic String）用来表示字符串（Redis 3.2前）。
sds.h/sdshdr
struct sdshdr { unsigned int len; // 记录 buf 数组中已使字节的数量 unsigned int free; // 记录 buf 数组中未使用字节的数量 char buf[]; // 字节数组，用于保存字符串 }; buf 数组长度不一定就是字符串长度 + 1（&amp;quot;\0&amp;quot;），还有 free 空间，数组内未使用的字节通过 free 属性记录。
相比于 C 字符串，SDS 有以下优势：
兼容部分 C 字符串函数 sds.c/sdsnew
* mystring = sdsnewlen(&amp;#34;abc&amp;#34;,3); * * You can print the string with printf() as there is an implicit \0 at the * end of the string.</description></item></channel></rss>